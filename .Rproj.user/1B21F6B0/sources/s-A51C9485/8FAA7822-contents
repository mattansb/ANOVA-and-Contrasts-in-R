---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, fig.path = "man/")
```

# marginC

This (mini) R package allows for the definition of interaction contrasts by way of defining marginal contrasts.

## Download and Install

You can install `marginC` from [github](https://github.com/mattansb/marginC) with:

```R
# install.packages("devtools")
devtools::install_github("mattansb/marginC")
```

These functions are meant for use alongside [`emmeans`](https://cran.r-project.org/package=emmeans)'s functions (as seen bellow).

You will also need:  
  - [`magrittr`](https://cran.r-project.org/package=magrittr)  
  - [`purrr`](https://cran.r-project.org/package=purrr)  
(Both part of the [`tidyverse`](https://www.tidyverse.org/).)


## Example using `afex`


Some sample anova with `afex`:
```{r}
library(afex)

data(md_12.1)
fit <- aov_ez("id", "rt", md_12.1,
              within = c("angle", "noise"))
```

```{r, echo=FALSE}
knitr::kable(nice(fit, es = "pes", correction = "none"))

```

Using `emmeans` it is easy to see this pattern:

 Lets break down that interaction using `emmeans`:
```{r}
library(emmeans)

# Define the interactions's refeerence grid:
rg <- emmeans(fit, ~angle*noise)

# plot it:
emmip(rg, noise~angle, CIs = T)

```


For this example we will focus on the difference in the effect of noise between angle-4 and angle-8. We can define this interaction-contrast using marginal weights:  
  - `noise = c(-1,1)` (the difference between the levels of noise)  
  - `angle = c(0,1,-1)` (the difference between the two of the levels of angle)  

Lets see how `marginC` helps define this contrast.

### Using `get_marginal_weights`

```{r}
library(marginC)

get_marginal_weights(angle = c(0,-1,1), noise = c(-1,1))
```
If we include the reference grid (produced by `emmeans`), we get some additional functionality:  
  - The weights are named.  
  - The order in which we specify the marginal weights is dealt with internally.  
  - The lengths of the marginal weights is also tested internally for consistency with the reference grid object.  
  
```{r}
get_marginal_weights(angle = c(0,-1,1), noise = c(-1,1), .grid = rg)
```


Finally, we can feed this vector into `emmeans`'s `contrast`:

```{r}
contrast(rg, list(my_contrast = get_marginal_weights(angle = c(0,-1,1),
                                                     noise = c(-1,1),
                                                     .grid = rg)))
```

### Using `mw`

`mw` is a wraparound function for `get_marginal_weights` for ease of use:
```{r}
mw(angle = c(0,-1,1), noise = c(-1,1))
mw(angle = c(0,-1,1), noise = c(-1,1), .grid = rg)
```

### Using the `marginal_weights` Method

`marginC` also comes with a custom contrast method, used by defining the marginal weights as a list.

#### Use alone, in the `method` argument

```{r}
# Without the reference grid:
contrast(rg, "marginal_weights",.mweights = list(angle = c(0,-1,1), noise = c(-1,1)))
```

```{r}
# With the reference grid:
contrast(rg, "marginal_weights",.mweights = list(angle = c(0,-1,1), noise = c(-1,1)), .grid = rg)
```

We can also specify more than one set of marginal weights:
```{r}

mweights = list(
  "first_c"  = list(angle = c(0,-1,1),  noise = c(-1,1)),
  "second_c" = list(angle = c(2,-1,-1), noise = c(-1,1))
)
contrast(rg, "marginal_weights",.mweights = mweights, .grid = rg)

```
#### Use with other methods, in the `interaction` argument
(requires emmeans [v 1.1.3 or above](https://github.com/rvlenth/emmeans/issues/22).)

The `interaction` argument allows for the combination of different methods for different factors.

In this example, we will manually specify the marginal weights for `noise` using the `"marginal_weights"` method, but the marginal weights for `angle` will be determined by  the `"consec"` method: 

```{r}
contrast(rg, interaction = c("consec","marginal_weights"),.mweights = list(noise = c(-1,1)), .grid = rg)
```

As when using `""` as a single method, we can also specify a list of marginal weights here:
```{r}
mweights = list(
  "first_c" = list(angle = c(0,-1,1)),
  "second_c" = list(angle = c(2,-1,-1))
)
contrast(rg, interaction = c("marginal_weights","pairwise"),.mweights = mweights, .grid = rg)
```

`"marginal_weights"` can also be used with `"marginal_weights"` with a single `.mweights` and `.grid` arguments. This can be used when 3 or more factors are involved, and one wants to specify marginal weights only to 2 of the factors, an d have the weights of the 3rd factor determined by another method (_not that when using `"marginal_weights"` with `"marginal_weights"`, we cannot specify more than one set of marginal weights).
In this example we only have two factors, and so this:

```{r}
contrast(rg, interaction = c("marginal_weights","marginal_weights"),.mweights = list(angle = c(0,-1,1), noise = c(-1,1)), .grid = rg)
```

Will give the exact same results as:

```{r}
contrast(rg, "marginal_weights",.mweights = list(angle = c(0,-1,1), noise = c(-1,1)), .grid = rg)
```

## Authors

  - **Mattan S. Ben-Shachar** [aut, cre].
